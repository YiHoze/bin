((=
  "latex": {
    "title": "An Example of Jupyter Notebook",
    "author": "John Doe",
    "language": "english"
  },
=))

((*- extends 'display_priority.tplx' -*))
% Displaying simple data text
((* block data_text *))
\begin{verbatim}
((( output.data['text/plain'] )))
\end{verbatim}
((* endblock data_text *))

% Display python error text as-is
((* block error *))
\begin{Verbatim}[commandchars=\\\{\}]
((( super() )))
\end{Verbatim}
((* endblock error *))
((* block traceback_line *))
((( line | indent | strip_ansi | escape_latex )))
((* endblock traceback_line *))

% Display stream ouput with coloring
((* block stream *))
\begin{Verbatim}[commandchars=\\\{\}]
((( output.text | escape_latex | ansi2latex )))
\end{Verbatim}
((* endblock stream *))

% Display latex
((* block data_latex -*))
((( output.data['text/latex'] | strip_files_prefix )))
((* endblock data_latex *))

% Display markdown
((* block data_markdown -*))
((( output.data['text/markdown'] | citation2latex | strip_files_prefix | convert_pandoc('markdown+tex_math_double_backslash', 'latex'))))
((* endblock data_markdown *))

% Default mechanism for rendering figures
((*- block data_png -*))((( draw_figure(output.metadata.filenames['image/png']) )))((*- endblock -*))
((*- block data_jpg -*))((( draw_figure(output.metadata.filenames['image/jpeg']) )))((*- endblock -*))
((*- block data_svg -*))((( draw_figure(output.metadata.filenames['image/svg+xml']) )))((*- endblock -*))
((*- block data_pdf -*))((( draw_figure(output.metadata.filenames['application/pdf']) )))((*- endblock -*))

% Draw a figure using the graphicx package.
((* macro draw_figure(filename) -*))
((* set filename = filename | posix_path *))
((*- block figure scoped -*))
\begin{center}
\adjustimage{max size={0.9\linewidth}{0.9\paperheight}}{((( filename )))}
\end{center}
{ \hspace*{\fill} \\}
((*- endblock figure -*))
((*- endmacro *))

% Render markdown
((* block markdowncell scoped *))
((( cell.source | citation2latex | strip_files_prefix | convert_pandoc('markdown+tex_math_double_backslash', 'json',extra_args=[]) | resolve_references | convert_pandoc('json','latex'))))
((* endblock markdowncell *))
((* block unknowncell scoped *))((* endblock unknowncell *))

((* block header *))

((* block docclass *))
((*- if nb.metadata.latex -*))
    ((*- if nb.metadata.latex.language -*))
    \documentclass[10pt, language=((( nb.metadata.latex.language )))]{hzguide}
    ((*- else -*))
    \documentclass[10pt, language=korean]{hzguide}
    ((*- endif -*))    
((*- else -*))
    \documentclass[10pt, language=korean]{hzguide}
((*- endif -*))    
    \usepackage{karijupyter}
((* endblock docclass *))

((* block title *))
((*- if nb.metadata.latex -*))
    ((*- if nb.metadata.latex.title -*))
    \title{((( nb.metadata.latex.title )))}
    ((*- else -*))
    \title{((( resources.metadata.name | ascii_only | escape_latex )))}
    ((*- endif -*))
((*- else -*))
    \title{((( resources.metadata.name | ascii_only | escape_latex )))}
((*- endif -*))
((* endblock title *))

((* block author *))
((*- if nb.metadata.latex -*))
    ((*- if nb.metadata.latex.author -*))
    \author{((( nb.metadata.latex.author )))}
    ((*- else -*))
    \author{}
    ((*- endif -*))
((*- else -*))
((*- endif -*))
((* endblock author *))

((* block date *))\date{}((* endblock date *))

((( super() )))
((( resources.latex.pygments_definitions )))    
\definecolor{incolor}{rgb}{0.0, 0.0, 0.5}
\definecolor{outcolor}{rgb}{0.545, 0.0, 0.0}
((* endblock header *))

((* block body *))
\begin{document}
((* block predoc *))
((* block maketitle *))
\maketitle
\tableofcontents*
((* endblock maketitle *))
((* block abstract *))((* endblock abstract *))
((* endblock predoc *))
((( super() )))

((* block postdoc *))
((* block bibliography *))((* endblock bibliography *))
((* endblock postdoc *))
\end{document}
((* endblock body *))

%===============================================================================
% Input
%===============================================================================

((* block input scoped *))
((*- if resources.global_content_filter.include_input_prompt *))
    ((( add_prompt(cell.source | highlight_code(strip_verbatim=True, metadata=cell.metadata), cell, 'In ', 'incolor') )))
((* endif *))
((* endblock input *))

%===============================================================================
% Output
%===============================================================================

((* block execute_result scoped *))
    ((*- for type in output.data | filter_data_type -*))
        ((*- if resources.global_content_filter.include_output_prompt -*))
            ((*- if type in ['text/plain'] *))
((( add_prompt(output.data['text/plain'] | escape_latex, cell, 'Out', 'outcolor') )))
            ((* else -*))
\texttt{\color{outcolor}Out[{\color{outcolor}((( cell.execution_count )))}]:}((( super() )))
            ((*- endif -*))
        ((*- endif -*))
    ((*- endfor -*))
((* endblock execute_result *))

%==============================================================================
% Support Macros
%==============================================================================

% Name: draw_prompt
% Purpose: Renders an output/input prompt
((* macro add_prompt(text, cell, prompt, prompt_color) -*))
    ((*- if cell.execution_count is defined -*))
    ((*- set execution_count = "" ~ (cell.execution_count | replace(None, " ")) -*))
    ((*- else -*))
    ((*- set execution_count = " " -*))
    ((*- endif -*))
    ((*- set indention =  " " * (execution_count | length + 7) -*))
\begin{Verbatim}[commandchars=\\\{\}]
((( text | add_prompts(first='', cont='') )))
\end{Verbatim}
((*- endmacro *))

((=
    ((* macro add_prompt(text, cell, prompt, prompt_color) -*))
        ((*- if cell.execution_count is defined -*))
        ((*- set execution_count = "" ~ (cell.execution_count | replace(None, " ")) -*))
        ((*- else -*))
        ((*- set execution_count = " " -*))
        ((*- endif -*))
        ((*- set indention =  " " * (execution_count | length + 7) -*))
    \begin{Verbatim}[commandchars=\\\{\}]
    ((( text | add_prompts(first='{\color{' ~ prompt_color ~ '}' ~ prompt ~ '[{\\color{' ~ prompt_color ~ '}' ~ execution_count ~ '}]:} ', cont=indention) )))
    \end{Verbatim}
    ((*- endmacro *))
=))
